// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: queries.sql

package sqlc

import (
	"context"
	"time"
)

const createTask = `-- name: CreateTask :exec
INSERT INTO tasks (id, name, summary, performed, createdAt, performedAt) VALUES (?, ?, ?, ?, ?, ?)
`

type CreateTaskParams struct {
	ID          string    `json:"id"`
	Name        string    `json:"name"`
	Summary     string    `json:"summary"`
	Performed   bool      `json:"performed"`
	Createdat   time.Time `json:"createdat"`
	Performedat time.Time `json:"performedat"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) error {
	_, err := q.db.ExecContext(ctx, createTask,
		arg.ID,
		arg.Name,
		arg.Summary,
		arg.Performed,
		arg.Createdat,
		arg.Performedat,
	)
	return err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks WHERE id = ?
`

func (q *Queries) DeleteTask(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteTask, id)
	return err
}

const doneTask = `-- name: DoneTask :exec
UPDATE tasks SET performed = ?, performedAt = ? WHERE id = ?
`

type DoneTaskParams struct {
	Performed   bool      `json:"performed"`
	Performedat time.Time `json:"performedat"`
	ID          string    `json:"id"`
}

func (q *Queries) DoneTask(ctx context.Context, arg DoneTaskParams) error {
	_, err := q.db.ExecContext(ctx, doneTask, arg.Performed, arg.Performedat, arg.ID)
	return err
}

const findAllTasks = `-- name: FindAllTasks :many
SELECT id, name, summary, performed, createdat, performedat FROM tasks
`

func (q *Queries) FindAllTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, findAllTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Summary,
			&i.Performed,
			&i.Createdat,
			&i.Performedat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findTaskById = `-- name: FindTaskById :one
SELECT id, name, summary, performed, createdat, performedat FROM tasks WHERE id = ?
`

func (q *Queries) FindTaskById(ctx context.Context, id string) (Task, error) {
	row := q.db.QueryRowContext(ctx, findTaskById, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Summary,
		&i.Performed,
		&i.Createdat,
		&i.Performedat,
	)
	return i, err
}

const updateTask = `-- name: UpdateTask :exec
UPDATE tasks SET name = ?, summary = ? WHERE id = ?
`

type UpdateTaskParams struct {
	Name    string `json:"name"`
	Summary string `json:"summary"`
	ID      string `json:"id"`
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) error {
	_, err := q.db.ExecContext(ctx, updateTask, arg.Name, arg.Summary, arg.ID)
	return err
}
