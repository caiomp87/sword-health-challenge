// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: queries.sql

package sqlc

import (
	"context"
	"time"
)

const createTask = `-- name: CreateTask :exec
INSERT INTO tasks (id, name, summary, performed, createdAt, performedAt, user_id) VALUES (?, ?, ?, ?, ?, ?, ?)
`

type CreateTaskParams struct {
	ID          string    `json:"id"`
	Name        string    `json:"name"`
	Summary     string    `json:"summary"`
	Performed   bool      `json:"performed"`
	Createdat   time.Time `json:"createdat"`
	Performedat time.Time `json:"performedat"`
	UserID      string    `json:"user_id"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) error {
	_, err := q.db.ExecContext(ctx, createTask,
		arg.ID,
		arg.Name,
		arg.Summary,
		arg.Performed,
		arg.Createdat,
		arg.Performedat,
		arg.UserID,
	)
	return err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO users (id, name, type, email, passwordHash, createdAt) VALUES (?, ?, ?, ?, ?, ?)
`

type CreateUserParams struct {
	ID           string    `json:"id"`
	Name         string    `json:"name"`
	Type         string    `json:"type"`
	Email        string    `json:"email"`
	Passwordhash string    `json:"passwordhash"`
	Createdat    time.Time `json:"createdat"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.ID,
		arg.Name,
		arg.Type,
		arg.Email,
		arg.Passwordhash,
		arg.Createdat,
	)
	return err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks WHERE id = ?
`

func (q *Queries) DeleteTask(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteTask, id)
	return err
}

const doneTask = `-- name: DoneTask :exec
UPDATE tasks SET performed = ?, performedAt = ? WHERE id = ? AND user_id = ?
`

type DoneTaskParams struct {
	Performed   bool      `json:"performed"`
	Performedat time.Time `json:"performedat"`
	ID          string    `json:"id"`
	UserID      string    `json:"user_id"`
}

func (q *Queries) DoneTask(ctx context.Context, arg DoneTaskParams) error {
	_, err := q.db.ExecContext(ctx, doneTask,
		arg.Performed,
		arg.Performedat,
		arg.ID,
		arg.UserID,
	)
	return err
}

const findAllTasks = `-- name: FindAllTasks :many
SELECT id, name, summary, performed, createdat, performedat, user_id FROM tasks
`

func (q *Queries) FindAllTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, findAllTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Summary,
			&i.Performed,
			&i.Createdat,
			&i.Performedat,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAllTasksByUserID = `-- name: FindAllTasksByUserID :many
SELECT id, name, summary, performed, createdat, performedat, user_id FROM tasks WHERE user_id = ?
`

func (q *Queries) FindAllTasksByUserID(ctx context.Context, userID string) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, findAllTasksByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Summary,
			&i.Performed,
			&i.Createdat,
			&i.Performedat,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findTaskByID = `-- name: FindTaskByID :one
SELECT id, name, summary, performed, createdat, performedat, user_id FROM tasks WHERE id = ?
`

func (q *Queries) FindTaskByID(ctx context.Context, id string) (Task, error) {
	row := q.db.QueryRowContext(ctx, findTaskByID, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Summary,
		&i.Performed,
		&i.Createdat,
		&i.Performedat,
		&i.UserID,
	)
	return i, err
}

const findTaskByIDAndUserID = `-- name: FindTaskByIDAndUserID :one
SELECT id, name, summary, performed, createdat, performedat, user_id FROM tasks WHERE id = ? AND user_id = ?
`

type FindTaskByIDAndUserIDParams struct {
	ID     string `json:"id"`
	UserID string `json:"user_id"`
}

func (q *Queries) FindTaskByIDAndUserID(ctx context.Context, arg FindTaskByIDAndUserIDParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, findTaskByIDAndUserID, arg.ID, arg.UserID)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Summary,
		&i.Performed,
		&i.Createdat,
		&i.Performedat,
		&i.UserID,
	)
	return i, err
}

const findUserByEmail = `-- name: FindUserByEmail :one
SELECT id, name, type, email, passwordhash, createdat FROM users WHERE email = ?
`

func (q *Queries) FindUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.Email,
		&i.Passwordhash,
		&i.Createdat,
	)
	return i, err
}

const findUserByID = `-- name: FindUserByID :one
SELECT id, name, type, email, passwordhash, createdat FROM users WHERE id = ?
`

func (q *Queries) FindUserByID(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.Email,
		&i.Passwordhash,
		&i.Createdat,
	)
	return i, err
}

const updateTask = `-- name: UpdateTask :exec
UPDATE tasks SET name = ?, summary = ? WHERE id = ? AND user_id = ?
`

type UpdateTaskParams struct {
	Name    string `json:"name"`
	Summary string `json:"summary"`
	ID      string `json:"id"`
	UserID  string `json:"user_id"`
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) error {
	_, err := q.db.ExecContext(ctx, updateTask,
		arg.Name,
		arg.Summary,
		arg.ID,
		arg.UserID,
	)
	return err
}
