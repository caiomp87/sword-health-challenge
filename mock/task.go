// Code generated by mockery v2.14.0. DO NOT EDIT.

package mock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/caiomp87/sword-health-challenge/models"
)

// ITask is an autogenerated mock type for the ITask type
type ITask struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, task
func (_m *ITask) Create(ctx context.Context, task *models.Task) error {
	ret := _m.Called(ctx, task)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Task) error); ok {
		r0 = rf(ctx, task)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByID provides a mock function with given fields: ctx, id
func (_m *ITask) DeleteByID(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Done provides a mock function with given fields: ctx, id, userID
func (_m *ITask) Done(ctx context.Context, id string, userID string) error {
	ret := _m.Called(ctx, id, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, id, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: ctx
func (_m *ITask) FindAll(ctx context.Context) ([]*models.Task, error) {
	ret := _m.Called(ctx)

	var r0 []*models.Task
	if rf, ok := ret.Get(0).(func(context.Context) []*models.Task); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllByUserID provides a mock function with given fields: ctx, userID
func (_m *ITask) FindAllByUserID(ctx context.Context, userID string) ([]*models.Task, error) {
	ret := _m.Called(ctx, userID)

	var r0 []*models.Task
	if rf, ok := ret.Get(0).(func(context.Context, string) []*models.Task); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *ITask) FindByID(ctx context.Context, id string) (*models.Task, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.Task
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Task); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByIDAndUserID provides a mock function with given fields: ctx, id, userID
func (_m *ITask) FindByIDAndUserID(ctx context.Context, id string, userID string) (*models.Task, error) {
	ret := _m.Called(ctx, id, userID)

	var r0 *models.Task
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *models.Task); ok {
		r0 = rf(ctx, id, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, id, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateByID provides a mock function with given fields: ctx, id, userID, task
func (_m *ITask) UpdateByID(ctx context.Context, id string, userID string, task *models.Task) error {
	ret := _m.Called(ctx, id, userID, task)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *models.Task) error); ok {
		r0 = rf(ctx, id, userID, task)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewITask interface {
	mock.TestingT
	Cleanup(func())
}

// NewITask creates a new instance of ITask. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewITask(t mockConstructorTestingTNewITask) *ITask {
	mock := &ITask{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
