// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: queries.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createTask = `-- name: CreateTask :exec
INSERT INTO tasks (id, name, summary) VALUES (?, ?, ?)
`

type CreateTaskParams struct {
	ID      string         `json:"id"`
	Name    sql.NullString `json:"name"`
	Summary sql.NullString `json:"summary"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) error {
	_, err := q.db.ExecContext(ctx, createTask, arg.ID, arg.Name, arg.Summary)
	return err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks WHERE id = ?
`

func (q *Queries) DeleteTask(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteTask, id)
	return err
}

const getTaskById = `-- name: GetTaskById :one
SELECT id, name, summary, createdat, performedat FROM tasks WHERE id = ?
`

func (q *Queries) GetTaskById(ctx context.Context, id string) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTaskById, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Summary,
		&i.Createdat,
		&i.Performedat,
	)
	return i, err
}

const getTasks = `-- name: GetTasks :many
SELECT id, name, summary, createdat, performedat FROM tasks
`

func (q *Queries) GetTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Summary,
			&i.Createdat,
			&i.Performedat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTask = `-- name: UpdateTask :exec
UPDATE tasks SET name = ?, summary = ?, performedAt = ? WHERE id = ?
`

type UpdateTaskParams struct {
	Name        sql.NullString `json:"name"`
	Summary     sql.NullString `json:"summary"`
	Performedat sql.NullTime   `json:"performedat"`
	ID          string         `json:"id"`
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) error {
	_, err := q.db.ExecContext(ctx, updateTask,
		arg.Name,
		arg.Summary,
		arg.Performedat,
		arg.ID,
	)
	return err
}
